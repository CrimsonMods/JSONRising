@using System.Dynamic
@using System.Text.Json
@using JSONRising.Components
@using JSONRising.Components.Inputs
@using JSONRising.Models;

<div class="schema-editor">
    @foreach (var field in Schema.Fields)
    {
        var fieldValue = GetFieldValue(field.Path);
        <DynamicComponent Type="@GetComponentType(field.ComponentType)"
                         Parameters="@GetComponentParameters(field)"
                         @bind-Value="fieldValue" />
    }
</div>

@code {
    [Parameter] public JsonSchema Schema { get; set; }
    [Parameter] public string JsonContent { get; set; }
    
    private Type GetComponentType(string componentType) 
    {
        return componentType switch
        {
            "FilterList" => typeof(FilterListInput),
            _ => throw new ArgumentException($"Unknown component type: {componentType}")
        };
    }

    private Dictionary<string, object> GetComponentParameters(SchemaField field)
    {
        var parameters = new Dictionary<string, object>();
        
        // Add any default parameters
        parameters["Label"] = field.Name;
        
        // Add custom component properties from schema
        if (field.ComponentProps != null)
        {
            foreach (var prop in field.ComponentProps)
            {
                parameters[prop.Key] = prop.Value;
            }
        }

        return parameters;
    }

    private object GetFieldValue(string jsonPath)
    {
        // Parse the JSON content
        using JsonDocument doc = JsonDocument.Parse(JsonContent);
        
        // Navigate to the specified path and get value
        JsonElement element = doc.RootElement;
        string[] pathParts = jsonPath.Split('.');
        
        foreach (var part in pathParts)
        {
            if (part.StartsWith("$")) continue; // Skip root indicator
            if (!element.TryGetProperty(part, out element))
            {
                return null;
            }
        }

        return element.GetString();
    }
}
    using JSONRising.Components.Inputs;

#line default
#line hidden
#nullable disable
