@using System.Text.Json
@inject IJSRuntime JSRuntime

<div class="dynamic-editor">
    <div class="json-tree">
        @RenderJsonContent(JsonContent)
    </div>
</div>

@code {
    [Parameter]
    public Dictionary<string, object> JsonContent { get; set; }

    [Parameter]
    public EventCallback<string> OnSave { get; set; }

    [Parameter]
    public EventCallback<Dictionary<string, object>> OnValueChanged { get; set; }

    private RenderFragment RenderJsonContent(Dictionary<string, object> content) => builder =>
    {
        foreach (var item in content)
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "json-item");

            builder.OpenElement(2, "label");
            builder.AddContent(3, $"{item.Key}:");
            builder.CloseElement();

            if (item.Value is Dictionary<string, object> nestedDict)
            {
                builder.OpenElement(4, "div");
                builder.AddAttribute(5, "class", "nested-object");
                builder.AddContent(6, RenderJsonContent(nestedDict));
                builder.CloseElement();
            }
            else if (item.Value is List<object> list)
            {
                builder.OpenElement(7, "div");
                builder.AddAttribute(8, "class", "array-container");

                // Add array controls
                builder.OpenElement(20, "button");
                builder.AddAttribute(21, "class", "array-button");
                builder.AddAttribute(22, "onclick", EventCallback.Factory.Create(this, () => AddArrayItem(item.Key)));
                builder.AddContent(23, "Add Item");
                builder.CloseElement();

                foreach (var (listItem, index) in list.Select((value, i) => (value, i)))
                {
                    builder.OpenElement(24, "div");
                    builder.AddAttribute(25, "class", "array-item");

                    if (listItem is Dictionary<string, object> dictItem)
                    {
                        builder.AddContent(9, RenderJsonContent(dictItem));
                    }
                    else
                    {
                        builder.OpenElement(10, "input");
                        builder.AddAttribute(11, "type", "text");
                        builder.AddAttribute(12, "value", listItem?.ToString());
                        builder.CloseElement();
                    }

                    // Remove button for each item
                    builder.OpenElement(26, "button");
                    builder.AddAttribute(27, "class", "remove-button");
                    builder.AddAttribute(28, "onclick", EventCallback.Factory.Create(this, () => RemoveArrayItem(item.Key, index)));
                    builder.AddContent(29, "X");
                    builder.CloseElement();

                    builder.CloseElement();
                }
                builder.CloseElement();
            }
            else
            {
                builder.OpenElement(13, "input");
                builder.AddAttribute(14, "type", GetInputType(item.Value));
                builder.AddAttribute(15, "value", item.Value?.ToString());
                builder.AddAttribute(16, "onchange", EventCallback.Factory.CreateBinder<string>(
        this,
        async value =>
        {
            JsonContent[item.Key] = value;
            await OnValueChanged.InvokeAsync(JsonContent);
        },
        item.Value?.ToString() ?? ""
        ));
                builder.CloseElement();
            }
            builder.CloseElement();
        }
    };

    private string GetInputType(object value)
    {
        return value switch
        {
            int or double or float or decimal => "number",
            bool => "checkbox",
            _ => "text"
        };
    }

    private async Task AddArrayItem(string key)
    {
        if (JsonContent[key] is List<object> list)
        {
            // Clone structure of first item if exists
            if (list.Count > 0 && list[0] is Dictionary<string, object> template)
            {
                var newItem = new Dictionary<string, object>();
                foreach (var kvp in template)
                {
                    newItem[kvp.Key] = "";
                }
                list.Add(newItem);
            }
            await OnValueChanged.InvokeAsync(JsonContent);
        }
    }

    private async Task RemoveArrayItem(string key, int index)
    {
        if (JsonContent[key] is List<object> list && index < list.Count)
        {
            list.RemoveAt(index);
            await OnValueChanged.InvokeAsync(JsonContent);
        }
    }
}

<style>
    .json-item {
        margin: 8px 0;
        padding: 4px;
    }

    .nested-object {
        margin-left: 20px;
        padding: 8px;
        border-left: 2px solid #ccc;
    }

    .array-container {
        margin-left: 20px;
        padding: 8px;
        border-left: 2px solid #88c;
    }

    .array-item {
        display: flex;
        align-items: center;
        margin: 4px 0;
    }

    .array-button {
        margin: 8px 0;
        padding: 4px 8px;
    }

    .remove-button {
        margin-left: 8px;
        padding: 2px 6px;
        color: red;
    }

    .array-items {
        margin-left: 20px;
        padding: 8px;
        border-left: 2px solid #88c;
    }

    label {
        display: inline-block;
        min-width: 120px;
        font-weight: bold;
    }

    input {
        margin-left: 8px;
        padding: 4px;
    }
</style>
